--ANÁLISE RFM PARCIAL - RECÊNCIA E FREQUÊNCIA

SELECT
    *,
    -- Calcula a recência com base na data mais recente da compra
    CASE
        WHEN final > CURRENT_DATE() THEN 4  -- Se a data final for maior que a data atual, recência é 0
        WHEN final BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE() THEN 4  -- final entre 30 dias atrás e hoje, recência é 4
        WHEN final BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) THEN 3  -- final entre 90 e 30 dias atrás, recência é 3
        WHEN final BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) THEN 2  -- final entre 180 e 90 dias atrás, recência é 2
        WHEN final < DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY) THEN 1  -- Se a data final for mais do que 180 dias atrás, recência é 1
    END AS recency,

FROM (
    -- Seleciona os dados agregados necessários para calcular recência e frequência
    SELECT
        cv.nomeCpf,
        cv.cpf,
        cv.telefone,
        cv.email,
        aggregated_data.valorTotalPago,
        aggregated_data.numberOfOrders,
        cv.QNT1,
        cv.dataCompra,
        DATE_ADD(cv.dataCompra, INTERVAL QNT1 MONTH) AS final,  -- Calcula a data de fim de uso com base na quantidade de meses de uso
        cv.tipoDeCompra,
        cv.formaPagamento,
        cv.cupom,
        cv.brindeDesconto,
        aggregated_data.valorTotalPago / aggregated_data.numberOfOrders AS media_custo_pedido,  -- Adiciona a média de custo dos pedidos
        CASE
            WHEN aggregated_data.numberOfOrders = 1 THEN 1  -- Se houver apenas uma ordem, a nota de frequência é 1
            WHEN aggregated_data.numberOfOrders = 2 THEN 2  -- Se houver duas ordens, a nota de frequência é 2
            WHEN aggregated_data.numberOfOrders BETWEEN 3 AND 4 THEN 3  -- Se houver entre 3 e 4 ordens, a nota de frequência é 3
            ELSE 4  -- Caso contrário, a nota de frequência é 4
        END AS frequency,  -- Adiciona a nota de frequência
    FROM (
        -- Seleciona a data mais recente da compra para cada CPF
        SELECT
            cpf,
            MAX(dataCompra) as LatestCompra
        FROM `setyou-prd.controle_de_vendas.controle_de_vendas`
        GROUP BY cpf
    ) AS latest_compras
    INNER JOIN `setyou-prd.controle_de_vendas.controle_de_vendas` cv ON latest_compras.cpf = cv.cpf AND latest_compras.LatestCompra = cv.dataCompra
    INNER JOIN (
        -- Seleciona os dados agregados (valor total pago e número de pedidos) para cada CPF
        SELECT
            cpf,
            SUM(valorPago) AS valorTotalPago,
            COUNT(cpf) AS numberOfOrders
        FROM `setyou-prd.controle_de_vendas.controle_de_vendas`
        GROUP BY cpf
    ) AS aggregated_data ON cv.cpf = aggregated_data.cpf
) AS final_data
--WHERE final_data.formaPagamento != 'Brinde' -- Exclui linhas com "brinde" na coluna "formaPagamento"
WHERE LOWER(final_data.formaPagamento) != 'brinde' -- Exclui linhas com "brinde" na coluna "formaPagamento"
ORDER BY dataCompra;
--------------------------------------------------------------------------------------------------------------------------------------------------
--SEPARAÇÃO EM QUARTIS

WITH RankedData AS (
    SELECT *,
        ROW_NUMBER() OVER (ORDER BY media_custo_pedido) AS rank
    FROM setyou-prd.teste.RFM_parcial
)
SELECT 
    nomeCpf,
    cpf,
    telefone,
    email,
    valorTotalPago,
    numberOfOrders,
    QNT1,
    dataCompra,
    final,
    tipoDeCompra,
    formaPagamento,
    cupom,
    brindeDesconto,
    media_custo_pedido,
    frequency,
    recency,
    monetary_value
FROM (
    SELECT *,
        NTILE(4) OVER (ORDER BY rank) AS monetary_value
    FROM RankedData
) AS FinalData;


-- 4 --> 315,01 - 205355,0
-- 3 --> 222,46 - 315,01
-- 2 --> 175,07 - 222,46
-- 1 --> 0,0 - 175,07
